// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5114.MyRobot2017;

import org.omg.CosNaming.NamingContextExtPackage.AddressHelper;
import org.usfirst.frc5114.MyRobot2017.auton.commands.DriveStraight;
import org.usfirst.frc5114.MyRobot2017.auton.modes.BLUEPlaceGearChuteSide;
import org.usfirst.frc5114.MyRobot2017.auton.modes.DriveTest;
import org.usfirst.frc5114.MyRobot2017.auton.modes.PlaceGearLeftMP;
import org.usfirst.frc5114.MyRobot2017.auton.modes.PlaceGearLeftVision;
import org.usfirst.frc5114.MyRobot2017.auton.modes.PlaceGearRightMP;
import org.usfirst.frc5114.MyRobot2017.auton.modes.PlaceGearRightVision;
import org.usfirst.frc5114.MyRobot2017.auton.modes.PlaceGearLeft;
import org.usfirst.frc5114.MyRobot2017.auton.modes.PlaceGearLeftBlue;
import org.usfirst.frc5114.MyRobot2017.auton.modes.PlaceGearMiddleMP;
import org.usfirst.frc5114.MyRobot2017.auton.modes.PlaceGearMiddleVision;
import org.usfirst.frc5114.MyRobot2017.auton.modes.BLUEPlaceGearMiddle;
import org.usfirst.frc5114.MyRobot2017.auton.modes.BLUEShoot;
import org.usfirst.frc5114.MyRobot2017.auton.modes.PlaceGearRight;
import org.usfirst.frc5114.MyRobot2017.auton.modes.PlaceGearRightBlue;
import org.usfirst.frc5114.MyRobot2017.auton.modes.REDPlaceGearChuteSide;
import org.usfirst.frc5114.MyRobot2017.auton.modes.REDPlaceGearMiddle;
import org.usfirst.frc5114.MyRobot2017.auton.modes.REDShoot;
import org.usfirst.frc5114.MyRobot2017.auton.modes.REDShootGearVision;
import org.usfirst.frc5114.MyRobot2017.auton.modes.VisionShootAlignTest;
import org.usfirst.frc5114.MyRobot2017.auton.modes.VisionTestLoadingRED;
import org.usfirst.frc5114.MyRobot2017.auton.modes.VisionTurnTest;
import org.usfirst.frc5114.MyRobot2017.commands.DriveWithGamePad;
import org.usfirst.frc5114.MyRobot2017.commands.KickOutBucket;
import org.usfirst.frc5114.MyRobot2017.subsystems.Agitator;
import org.usfirst.frc5114.MyRobot2017.subsystems.ArcadeDriveTrain;
import org.usfirst.frc5114.MyRobot2017.subsystems.BallIntake;
import org.usfirst.frc5114.MyRobot2017.subsystems.BotCompressor;
import org.usfirst.frc5114.MyRobot2017.subsystems.Chassis;
import org.usfirst.frc5114.MyRobot2017.subsystems.Flashlight;
import org.usfirst.frc5114.MyRobot2017.subsystems.GearRelease;
import org.usfirst.frc5114.MyRobot2017.subsystems.Lift;
import org.usfirst.frc5114.MyRobot2017.subsystems.Loader;
import org.usfirst.frc5114.MyRobot2017.subsystems.Shooter;
import org.usfirst.frc5114.MyRobot2017.subsystems.TankDriveTrain;

import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Sendable;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import jaci.pathfinder.Pathfinder;
import jaci.pathfinder.Waypoint;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    private Command autonomousCommand;
    private SendableChooser<CommandGroup> autoChooser;
    private boolean autonChooserIsNotBroken = true;
    private static double DEADBAND = 0.25;
    private static double INTAKEPOWER = 0.5;
    private static double NOPOWER = 0.0;
    private static boolean shoot = false;
    
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static ArcadeDriveTrain driveTrain;
    public static TankDriveTrain tankDrive;
    public static Lift liftBot;
    public static BallIntake intakeBall;
    public static Loader loadBalls;
    public static Shooter shootBall;
    public static Chassis chassis;
    public static Agitator agitator;
    public static GearRelease gearRelease;
    public static BotCompressor botCompressor;
    public static GenerateTrajectories generate;
    public static Flashlight flashlight; 
    public static Timer timer;
    public static double newSpeed;
    public static double newMiddleScalar;
    public static double newChuteScalar;
    
    //public static GenerateSRXMotionProfile gearMiddle;
    //public static GenerateSRXMotionProfile gearLeft;
    //public static GenerateSRXMotionProfile gearRight;

    //vision stuff
    public static UsbCamera camera;
    private Thread visionThread;
    public static NetworkTable gearCamReport;
    public static NetworkTable shootCamReport;
    
    //GEAR CAMERA SETTINGS
    public static int gearCamXRes = 160;
    public static int gearCamYRes = 120;
    public static double gearCamXFOV = 56.7;
    public static double gearCamYFOV = 44.1;
    public static double gearCamDegreesPerPixelX = gearCamXFOV/gearCamXRes;
    public static double gearCamDegreesPerPixelY = gearCamYFOV/gearCamYRes;
    
    //CONTOUR REPORTS - GEAR CAMERA
    public static double[] gearCamCenterX;
    public static double[] gearCamArea;
    
    
    //SHOOT CAMERA SETTINGS
    public static int shootCamXRes = 800;
    public static int shootCamYRes = 600;
    public static double shootCamXFOV = 67;
    public static double shootCamYFOV = 50.25;
    public static double shootCamDegreesPerPixelX = shootCamXFOV/shootCamXRes;
    public static double shootCamDegreesPerPixelY = shootCamYFOV/shootCamYRes;
    
    //CONTOUR REPORTS - SHOOT CAMERA
    public static double[] shootCamCenterX;
    public static double[] shootCamCenterY;
    public static double[] shootCamWidth;
    public static double[] shootCamHeight;
    public static double[] shootCamArea;
    
    public static final double newSpeedDef = 3600;
    
    
    public static final double newMiddleScalarDef = 0.0005;
    public static final double newChuteScalarDef = 0.00025;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    
    public void robotInit() {
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    	//Initialize the Robot Hardware
    	RobotMap.init();
    	
    	camera = CameraServer.getInstance().startAutomaticCapture(1);
    	//CameraServer.getInstance().setSize(CameraServer.kSize640x480);
    	
    	//Instantiate and initialize arcade drive
    	driveTrain = new ArcadeDriveTrain();
        driveTrain.init();
        
        //Instantiate Lift and Intake
        liftBot = new Lift();
        intakeBall = new BallIntake();
        loadBalls = new Loader();
        shootBall = new Shooter();
        agitator = new Agitator();
        gearRelease = new GearRelease();
        flashlight = new Flashlight();
        generate = new GenerateTrajectories();
        chassis = new Chassis();
        botCompressor = new BotCompressor();
        
    	camera.setExposureManual(3);
        camera.setBrightness(3);
        camera.setFPS(30);
        camera.setResolution(gearCamXRes, gearCamYRes);
        gearCamReport = NetworkTable.getTable("GRIP/myMicrosoftReport");
        shootCamReport = NetworkTable.getTable("GRIP/myAxisReport");
        
    	
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        /*
        //GENERATE MOTION PROFILES
        gearMiddle = new GenerateSRXMotionProfile(RobotMap.frontLeftMotor, RobotMap.frontRightMotor, false);
        gearMiddle.generateTankTrajectory(new Waypoint[] {
				new Waypoint(0, 0, 0),
				new Waypoint(73, 0, 0)});
        
        //distance should be checked
        gearLeft = new GenerateSRXMotionProfile(RobotMap.frontLeftMotor, RobotMap.frontRightMotor, false);
        gearLeft.generateTankTrajectory(new Waypoint[] {
				new Waypoint(0, 0, 0),
				new Waypoint(82, 0, 0)});
        
        //distance should be checked
        gearRight = new GenerateSRXMotionProfile(RobotMap.frontLeftMotor, RobotMap.frontRightMotor, false);
        gearRight.generateTankTrajectory(new Waypoint[] {
				new Waypoint(0, 0, 0),
				new Waypoint(79, 0, 0)});
		*/
       
        
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        autoChooser = new SendableChooser<CommandGroup>();
        
        
        autoChooser.addObject("Place Gear Middle - VISION", new PlaceGearMiddleVision());
        autoChooser.addObject("Place Gear Right - VISION", new PlaceGearRightVision());
        autoChooser.addObject("Place Gear Left - VISION", new PlaceGearLeftVision());
        
        autoChooser.addObject("BLUE Shoot (34.5 in)", new BLUEShoot());
        autoChooser.addObject("RED Shoot (31.5 in)", new REDShoot());
        
        autoChooser.addObject("Vision Shoot Align Test", new VisionShootAlignTest());
        
        SmartDashboard.putData("Auton Mode", autoChooser);
        SmartDashboard.putNumber("New Shooter Value", 3600);
        
        timer = new Timer();
       
    }
    
	double defaultValue[] = new double[0];
    
	@SuppressWarnings("deprecation")
	public void robotPeriodic() {
		LiveWindow.run();
		
		gearCamCenterX = gearCamReport.getNumberArray("centerX", defaultValue);
		gearCamArea = gearCamReport.getNumberArray("area", defaultValue);
		
		shootCamArea = shootCamReport.getNumberArray("area", defaultValue);
		shootCamCenterX = shootCamReport.getNumberArray("centerX", defaultValue);
		shootCamCenterY = shootCamReport.getNumberArray("centerY", defaultValue);
		shootCamWidth = shootCamReport.getNumberArray("width", defaultValue);
		shootCamHeight = shootCamReport.getNumberArray("height", defaultValue);
		
		
		SmartDashboard.putNumber("IMU_Yaw", RobotMap.ahrs.getYaw());
	    
	    SmartDashboard.putNumber("Right Encoder Count", RobotMap.frontRightMotor.getPosition());
	    SmartDashboard.putNumber("Left Encoder Count", RobotMap.frontLeftMotor.getPosition());

	    SmartDashboard.putNumber("Distance", RobotMap.frontRightMotor.getPosition() * 6 * Math.PI);
	
	    SmartDashboard.putNumber("Left Speed" , RobotMap.frontLeftMotor.get());
	    SmartDashboard.putNumber("Right Speed" , RobotMap.frontRightMotor.get());
	    
	    SmartDashboard.putNumber("Shooter Speed", RobotMap.shooterLaunchMotor.getSpeed());
	    newSpeed = SmartDashboard.getNumber("New Shooter Value", newSpeedDef);
	    SmartDashboard.putNumber("Current Shooter Value", newSpeed);

	}

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        robotPeriodic();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	
    	//autonomousCommand = autoChooser.getSelected();
        
    	RobotMap.solenoid1.set(DoubleSolenoid.Value.kOff);
    	RobotMap.solenoid1.set(DoubleSolenoid.Value.kForward);
    	
    	RobotMap.frontLeftMotor.setPosition(0);
    	RobotMap.frontRightMotor.setPosition(0);
    	RobotMap.ahrs.zeroYaw();
    	
    	System.out.println();
    	System.out.println(autoChooser.getSelected() + " was selected");
    	System.out.println();
        
    	Robot.driveTrain.zeroSensor();
    	Robot.driveTrain.gyro.zeroYaw();
    	
    	timer.start();
    	
    	autonomousCommand = (Command) autoChooser.getSelected();
    	autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        robotPeriodic();
		
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        driveTrain.zeroSensor();
        RobotMap.frontRightMotor.changeControlMode(TalonControlMode.PercentVbus);
        RobotMap.frontLeftMotor.changeControlMode(TalonControlMode.PercentVbus);
        
        new DriveWithGamePad();
    }

    /**
     * This function is called periodically during operator control
     */
    
    
    public void teleopPeriodic() {
        
		
        Scheduler.getInstance().run();
        /*
         	while (isOperatorControl() && isEnabled()) {
    		//RobotMap.driveTrainRobotDrive4.tankDrive(oi.rightJoystick,oi.leftJoystick);
        	
    		//RobotMap.driveTrainRobotDrive4.arcadeDrive(forward, turn);
        	RobotMap.driveTrainRobotDrive2.arcadeDrive(oi.driveGamePad, 1, oi.driveGamePad, 4,true);
        	*/
        	//Lift/Lower Bot if Y-axis is outside of the deadband
        	if(Math.abs(oi.controlGamePad.getRawAxis(1))>=DEADBAND)
        	{
        		liftBot.lift(oi.controlGamePad.getRawAxis(1));
        	}
        	else
        	{
        		liftBot.lift(NOPOWER);
        	}
        	
        	if(oi.zeroYaw.get()){
        		RobotMap.ahrs.zeroYaw();
        	}
        	
        	
        	//RobotMap.frontLeftMotor.set(-.15);
        	/*
    		if(oi.load.get()){
    			intakeBall.intake(-INTAKEPOWER);
    		}
    		else{
    			intakeBall.intake(NOPOWER);
    		}
    		
    		if(oi.launch.get()){
    			shoot^=shoot;
    		}
    		shootBall.launch(shoot?1.0:0.0); 
    	
    		    		
    		Timer.delay(0.01);

    	} */
    }

    /**
     * Runs during test mode
     */
    public void test() {
    }


    
    
    
    
    public void testPeriodic() {
        LiveWindow.run();
        robotPeriodic();
    }
}
