// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5114.MyRobot2017.subsystems;

import org.usfirst.frc5114.MyRobot2017.OI;
import org.usfirst.frc5114.MyRobot2017.Robot;
import org.usfirst.frc5114.MyRobot2017.RobotMap;
import org.usfirst.frc5114.MyRobot2017.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;
import com.kauailabs.navx.frc.AHRS;
import java.lang.String;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.RobotDrive.MotorType;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class ArcadeDriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public final CANTalon frontRightMotor = RobotMap.frontRightMotor;
    private final CANTalon rearRightMotor = RobotMap.rearRightMotor;
    public final CANTalon frontLeftMotor = RobotMap.frontLeftMotor;
    private final CANTalon rearLeftMotor = RobotMap.rearLeftMotor;
    
    public final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive2;
    
    public final AHRS gyro = RobotMap.ahrs;
        
    private double power = 1.0;
    private double encoderError;
    public double scalar = Robot.newMiddleScalar;
    public double turnCorrection;
    
    public int targetPosition = 0;
    public double angleTurn = 0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

public void init(){
    	
    	//Configuration of RobotDrive class
    	robotDrive.setSafetyEnabled(false);
    	robotDrive.setExpiration(0.1);
    	robotDrive.setSensitivity(0.25);
    	robotDrive.setMaxOutput(1);
    	gyro.getYaw();
    	RobotMap.ahrs.zeroYaw();
    	
    	//Configure Motor Direction for Arcade Drive
    	//Based on the direction that the motors are installed on the drive chassis, verify at each robot design
    	
    	//DO NOT CHANGE DUMMIES
    	robotDrive.setInvertedMotor(MotorType.kRearRight, true);
    	robotDrive.setInvertedMotor(MotorType.kRearLeft, true);
    	//I SAID DO NOT CHANGE THESE VALUES!!!
    	
    	//Configure Encoders for driving in Arcade
    	//Encoders must be configured such that if Talon SRX Throttle (+), then the Sensor Position moves (+)
    	//Section 7 of SRX Programming Guide
    	frontLeftMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	frontRightMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
    	
    	frontLeftMotor.reverseSensor(false); //DON'T CHANGE THIS EITHER!!!
    	frontRightMotor.reverseSensor(true);
    	
    	
      	SmartDashboard.putString("Left Motor ID:", Integer.toString(frontLeftMotor.getDeviceID()));
    	SmartDashboard.putString("Right Motor ID:",  Integer.toString(frontRightMotor.getDeviceID()));
    	
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new DriveWithGamePad());
    }
    
    public void takeGamePadInput(Joystick controller) 
    {
    	if(OI.slowDrive.get() == true)
    		RobotMap.driveTrainRobotDrive2.arcadeDrive(controller.getRawAxis(1) * 0.7, controller.getRawAxis(4) * 0.7);
    	else
    		RobotMap.driveTrainRobotDrive2.arcadeDrive(controller.getRawAxis(1), controller.getRawAxis(4));
    	
    }
   
    public void zeroSensor()
    {
    	frontLeftMotor.setPosition(0);
    	frontRightMotor.setPosition(0);
    }
    
    public void encoderError()
    {
    	encoderError = (double)(frontRightMotor.getPosition() - frontLeftMotor.getPosition());
    }
    
    public double turnCorrection(double errorScalar)
    {
    	return encoderError * errorScalar;

    }
    
    /*
    public void driveNorth(double percentVolt)
    {
    	power = percentVolt;
    	frontLeftMotor.set(power);
    	frontRightMotor.set(-power);
    }
    
    public void driveSouth(double percentVolt)
    {
    	power = -percentVolt;
    	frontLeftMotor.set(power);
    	frontRightMotor.set(-power);
    }
    */
    
    public void setTargetPos(int pos)
    {
    	targetPosition = pos;
    }
    
    public void setAngleTurn(double angle)
    {
    	angleTurn = angle;
    }
    
    public void stop()
    {
    	robotDrive.drive(0, 0);
    }
}

