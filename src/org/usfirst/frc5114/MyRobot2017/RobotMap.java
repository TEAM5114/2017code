// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5114.MyRobot2017;

import org.usfirst.frc5114.MyRobot2017.subsystems.Flashlight;

import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;
import com.kauailabs.navx.frc.AHRS;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Solenoid;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static CameraServer camServer0; //Oxford change
	//public static CameraServer camServer1; Oxford change
	public static UsbCamera cam0; //Oxford change
	//public static UsbCamera cam1; Oxford change
	public static CANTalon frontRightMotor;
    public static CANTalon rearRightMotor;
    public static CANTalon frontLeftMotor;
    public static CANTalon rearLeftMotor;
    public static CANTalon liftMotor;
    public static CANTalon intakeBallMotor;
    public static CANTalon shooterLoadMotor;
    public static CANTalon shooterLaunchMotor;
    public static CANTalon agitatorMotor;
    public static Servo leftServo;
    public static Servo rightServo;
    public static DoubleSolenoid solenoid1;
    public static Compressor compressor;
    public static AHRS ahrs;
    public static Relay lightRelay;
    
    public static RobotDrive driveTrainRobotDrive2;
    
    private static final double pulsePerRevolution = 1000;
	private static final double distancePerRevolutionInches = 6.0/*wheel size*/ * Math.PI; 
	// Given our set of wheels and gear box, how many inches do we travel per pulse?
	public static final double DISTANCE_PER_PULSE = distancePerRevolutionInches / pulsePerRevolution;
	

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    	/*
    	 * ACTUALLY RIGHT :)
    	 */
    	frontRightMotor = new CANTalon(1);
        frontRightMotor.enableBrakeMode(true);
        frontRightMotor.changeControlMode(TalonControlMode.PercentVbus);
        frontRightMotor.configNominalOutputVoltage(0f, 0f);
        frontRightMotor.configPeakOutputVoltage(+12f, -12f);
        frontRightMotor.configEncoderCodesPerRev(250);
    	LiveWindow.addActuator("DriveTrain", "Front Right Motor", frontRightMotor);
    	
        
        rearRightMotor = new CANTalon(2);
        rearRightMotor.enableBrakeMode(true);
        rearRightMotor.changeControlMode(TalonControlMode.Follower);
    	rearRightMotor.set(1);
        rearRightMotor.configEncoderCodesPerRev(250);
    	LiveWindow.addActuator("DriveTrain", "Rear Right Motor", rearRightMotor);
        
    	/*
    	 * ACTUALLY LEFT :)
    	 */
        frontLeftMotor = new CANTalon(3);
        frontLeftMotor.enableBrakeMode(true);
        frontLeftMotor.changeControlMode(TalonControlMode.PercentVbus);
        frontLeftMotor.configNominalOutputVoltage(0f, 0f);
        frontLeftMotor.configPeakOutputVoltage(+12f, -12f);
        frontLeftMotor.configEncoderCodesPerRev(250);
    	LiveWindow.addActuator("DriveTrain", "Front Left Motor", frontLeftMotor);
    	
        rearLeftMotor = new CANTalon(4);
        rearLeftMotor.enableBrakeMode(true);
        rearLeftMotor.changeControlMode(TalonControlMode.Follower);
    	rearLeftMotor.set(3);
        rearLeftMotor.configEncoderCodesPerRev(250);
    	LiveWindow.addActuator("DriveTrain", "Rear Left Motor", rearLeftMotor);
        
        liftMotor = new CANTalon(5);
        LiveWindow.addActuator("Lift Motor", "Lift Motor", liftMotor);
        
        intakeBallMotor = new CANTalon(6);
        intakeBallMotor.enableBrakeMode(true);
        LiveWindow.addActuator("Ball Intake", "Ball Intake Motor", intakeBallMotor);
        
        shooterLoadMotor = new CANTalon(9); //9?
        LiveWindow.addActuator("Shooter Load", "Shooter Load Motor", shooterLoadMotor);
        
        shooterLaunchMotor = new CANTalon(7);
        shooterLaunchMotor.changeControlMode(TalonControlMode.Speed);
        shooterLaunchMotor.enableBrakeMode(true);
        LiveWindow.addActuator("Shooter Launch", "Shooter Launch", shooterLaunchMotor);
        shooterLaunchMotor.reverseSensor(true);
        shooterLaunchMotor.setPID(0.4, 0.0005, 0);
      	shooterLaunchMotor.configEncoderCodesPerRev(250);
        
        agitatorMotor = new CANTalon(8);
        LiveWindow.addActuator("Agitator", "Agitator Motor", agitatorMotor);
        
        //gearReleaseServo = new Servo(9);
        //LiveWindow.addActuator("Gear Release", "Gear Release", gearReleaseServo);
        
        leftServo = new Servo(8);
        LiveWindow.addActuator("Gear Release", "Gear Release", leftServo);
        
        rightServo = new Servo(7);
        LiveWindow.addActuator("Gear Release", "Gear Release", rightServo);
        
        lightRelay = new Relay(0);
        LiveWindow.addActuator("Shooter Relay", 0, lightRelay);
        
        solenoid1 = new DoubleSolenoid(20, 0, 1);
        LiveWindow.addActuator("Gear Release", "Solenoid 1", solenoid1);
        
        compressor = new Compressor();
        compressor.setClosedLoopControl(true);
        LiveWindow.addActuator("Gear Release", "Compressor", compressor);
        
        try{
        	camServer0.getInstance().startAutomaticCapture();
        	//camServer0.getVideo("cam0");
        	
        }
        catch(RuntimeException ex){
        	DriverStation.reportError("Camera USB0 Error", true);
        	
        }
//        
//        try{
//        	//camServer1.getInstance().startAutomaticCapture();
//        	//camServer1.getVideo("cam1");
//        	
//        }
//        catch(RuntimeException ex){
//        	DriverStation.reportError("Camera USB1 Error", true);
//        }
//        
        try{
        	ahrs = new AHRS(SPI.Port.kMXP);
        }
        catch(RuntimeException ex){
        	DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
    	}
        
        //front left, rear left, front right, rear right
        driveTrainRobotDrive2 = new RobotDrive(frontLeftMotor, frontRightMotor );//left motors = 3&4, right motors = 1&2
        
        //Create PID Control for rotating bot

        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
